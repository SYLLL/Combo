import { useState, useCallback } from "react";
import {
  FileText,
  Upload,
  CheckCircle,
  AlertTriangle,
  Info,
  Github,
  Scale,
  Figma,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";

interface AnalysisResult {
  status: "pending" | "good" | "questions" | "issues";
  message: string;
  details?: string[];
}

interface SchemaData {
  email: {
    type: string;
    format: string;
  };
  notes: string[];
  suggestions: string[];
  mitigations: string[];
}

interface LegalReview {
  facts: string[];
  notes: string[];
  suggestions: string[];
  mitigations: string[];
}

export default function Index() {
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [productDescription, setProductDescription] = useState(
    "Adding a daily mode toggle to user profile",
  );
  const [dragActive, setDragActive] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadStatus, setUploadStatus] = useState<{
    type: 'success' | 'error' | null;
    message: string;
  }>({ type: null, message: '' });
  const [githubUrl, setGithubUrl] = useState('');
  const [githubUrlError, setGithubUrlError] = useState('');
  const [settlementFiles, setSettlementFiles] = useState<File[]>([]);
  const [settlementDragActive, setSettlementDragActive] = useState(false);
  const [isUploadingSettlements, setIsUploadingSettlements] = useState(false);
  const [settlementUploadStatus, setSettlementUploadStatus] = useState<{
    type: 'success' | 'error' | null;
    message: string;
  }>({ type: null, message: '' });
  const [figmaUrl, setFigmaUrl] = useState('');
  const [figmaUrlError, setFigmaUrlError] = useState('');

  // Mock data matching the reference image
  const [analysis] = useState<AnalysisResult>({
    status: "good",
    message: "Good to proceed with the proposed changes",
    details: ["Age-gating changes"],
  });

  const [schemaData] = useState<SchemaData>({
    email: {
      type: "string",
      format: "email",
    },
    notes: ["Is sensitive user_data being stored?"],
    suggestions: ["Beta of the feed (e.g. store email domain only)"],
    mitigations: ["Age-gate for users aged 13 and over"],
  });

  const [legalReview] = useState<LegalReview>({
    facts: [
      "New feature launches email collection page",
      "Asks users to input email address",
    ],
    notes: ["Is sensitive user_data being stored?"],
    suggestions: ["Beta of the feed (e.g. store email domain only)"],
    mitigations: [
      "Age-gate for for user_aged 13 and over",
      "Enable the feature by default but prompt for age verification",
    ],
  });

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setUploadedFile(e.dataTransfer.files[0]);
    }
  }, []);

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setUploadedFile(e.target.files[0]);
    }
  };

  const validateGitHubUrl = (url: string): boolean => {
    if (!url.trim()) return true; // Empty URL is valid (optional field)
    try {
      const urlObj = new URL(url);
      return urlObj.hostname === 'github.com' && urlObj.pathname.split('/').length >= 3;
    } catch {
      return false;
    }
  };

  const handleGithubUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const url = e.target.value;
    setGithubUrl(url);
    
    if (url.trim() && !validateGitHubUrl(url)) {
      setGithubUrlError('Please enter a valid GitHub repository URL');
    } else {
      setGithubUrlError('');
    }
  };

  const validateFigmaUrl = (url: string): boolean => {
    if (!url.trim()) return true; // Empty URL is valid (optional field)
    try {
      const urlObj = new URL(url);
      return urlObj.hostname === 'www.figma.com' || urlObj.hostname === 'figma.com';
    } catch {
      return false;
    }
  };

  const handleFigmaUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const url = e.target.value;
    setFigmaUrl(url);
    
    if (url.trim() && !validateFigmaUrl(url)) {
      setFigmaUrlError('Please enter a valid Figma URL');
    } else {
      setFigmaUrlError('');
    }
  };

  // Settlement file handlers
  const handleSettlementDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setSettlementDragActive(true);
    } else if (e.type === "dragleave") {
      setSettlementDragActive(false);
    }
  }, []);

  const handleSettlementDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setSettlementDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const newFiles = Array.from(e.dataTransfer.files).filter(file => 
        file.type === 'application/pdf'
      );
      setSettlementFiles(prev => [...prev, ...newFiles]);
    }
  }, []);

  const handleSettlementFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newFiles = Array.from(e.target.files).filter(file => 
        file.type === 'application/pdf'
      );
      setSettlementFiles(prev => [...prev, ...newFiles]);
    }
  };

  const removeSettlementFile = (index: number) => {
    setSettlementFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleUploadSettlements = async () => {
    if (settlementFiles.length === 0) {
      return;
    }

    setIsUploadingSettlements(true);
    setSettlementUploadStatus({ type: null, message: '' });

    try {
      const formData = new FormData();
      settlementFiles.forEach((file, index) => {
        formData.append('files', file);
      });

      const response = await fetch('/api/upload-settlements', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const result = await response.json();
        console.log('Settlement files uploaded successfully:', result);
        setSettlementUploadStatus({
          type: 'success',
          message: `${result.uploadedCount} settlement files uploaded successfully`
        });
        setSettlementFiles([]); // Clear the files after successful upload
      } else {
        const errorData = await response.json().catch(() => ({ message: 'Upload failed' }));
        console.error('Settlement upload failed:', errorData.message);
        setSettlementUploadStatus({
          type: 'error',
          message: errorData.message || 'Upload failed'
        });
      }
    } catch (error) {
      console.error('Error uploading settlement files:', error);
      setSettlementUploadStatus({
        type: 'error',
        message: 'Network error occurred while uploading settlement files'
      });
    } finally {
      setIsUploadingSettlements(false);
    }
  };

  const handleRequestLegalReview = async () => {
    if (!uploadedFile) {
      return;
    }

    if (githubUrlError || figmaUrlError) {
      setUploadStatus({
        type: 'error',
        message: 'Please fix the URL format before submitting'
      });
      return;
    }

    setIsUploading(true);
    setUploadStatus({ type: null, message: '' });

    try {
      const formData = new FormData();
      formData.append('file', uploadedFile);
      formData.append('productDescription', productDescription);
      if (githubUrl.trim()) {
        formData.append('githubUrl', githubUrl.trim());
      }
      if (figmaUrl.trim()) {
        formData.append('figmaUrl', figmaUrl.trim());
      }

      const response = await fetch('/api/upload-requirements', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const result = await response.json();
        console.log('File uploaded successfully:', result);
        setUploadStatus({
          type: 'success',
          message: `File uploaded successfully: ${result.filename}`
        });
      } else {
        const errorData = await response.json().catch(() => ({ message: 'Upload failed' }));
        console.error('Upload failed:', errorData.message);
        setUploadStatus({
          type: 'error',
          message: errorData.message || 'Upload failed'
        });
      }
    } catch (error) {
      console.error('Error uploading file:', error);
      setUploadStatus({
        type: 'error',
        message: 'Network error occurred while uploading file'
      });
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-card px-4 sm:px-6 py-4">
        <h1 className="text-xl sm:text-2xl font-semibold text-foreground">
          Combo AI
        </h1>
        <p className="text-sm text-muted-foreground mt-1 hidden sm:block">
          Streamline product requirements review and compliance analysis
        </p>
      </header>

      {/* Main Content */}
      <div className="container mx-auto px-4 sm:px-6 py-6 sm:py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
          {/* Launch Compliance Section */}
          <Card className="md:col-span-2 lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5 text-primary" />
                Launch Compliance
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                Submit your product requirements for evaluation and advice.
              </p>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <label className="text-sm font-medium text-foreground mb-2 block">
                  Product description
                </label>
                <Textarea
                  value={productDescription}
                  onChange={(e) => setProductDescription(e.target.value)}
                  className="min-h-[60px] text-sm"
                />
              </div>

              <div>
                <label className="text-sm font-medium text-foreground mb-3 block">
                  Product requirements doc
                </label>
                <div
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                    dragActive
                      ? "border-primary bg-accent/50"
                      : "border-muted-foreground/30 hover:border-muted-foreground/50"
                  }`}
                  onDragEnter={handleDrag}
                  onDragLeave={handleDrag}
                  onDragOver={handleDrag}
                  onDrop={handleDrop}
                >
                  <input
                    type="file"
                    id="file-upload"
                    className="hidden"
                    onChange={handleFileInput}
                    accept=".pdf,.doc,.docx,.txt"
                  />
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <Upload className="h-8 w-8 text-muted-foreground mx-auto mb-3" />
                    {uploadedFile ? (
                      <div>
                        <p className="text-sm font-medium text-foreground">
                          {uploadedFile.name}
                        </p>
                        <p className="text-xs text-muted-foreground mt-1">
                          {(uploadedFile.size / 1024).toFixed(1)} KB
                        </p>
                      </div>
                    ) : (
                      <div>
                        <p className="text-sm text-muted-foreground">
                          Drag and drop file or click to select
                        </p>
                        <p className="text-xs text-muted-foreground mt-1">
                          PDF, DOC, or TXT files
                        </p>
                      </div>
                    )}
                  </label>
                </div>
              </div>

              <div>
                <label className="text-sm font-medium text-foreground mb-2 block flex items-center gap-2">
                  <Github className="h-4 w-4" />
                  GitHub Repository URL (Optional)
                </label>
                <div className="space-y-2">
                  <div className="relative">
                    <Input
                      type="url"
                      placeholder="https://github.com/username/repository"
                      value={githubUrl}
                      onChange={handleGithubUrlChange}
                      className={`text-sm ${githubUrlError ? 'border-red-500' : ''}`}
                    />
                    {githubUrl && !githubUrlError && (
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <div className="h-2 w-2 bg-green-500 rounded-full"></div>
                      </div>
                    )}
                  </div>
                  {githubUrlError ? (
                    <p className="text-xs text-red-500">{githubUrlError}</p>
                  ) : (
                    <p className="text-xs text-muted-foreground">
                      Paste your GitHub repository URL to provide code context for the review
                    </p>
                  )}
                </div>
              </div>

              <div>
                <label className="text-sm font-medium text-foreground mb-2 block flex items-center gap-2">
                  <Figma className="h-4 w-4" />
                  Figma Design URL (Optional)
                </label>
                <div className="space-y-2">
                  <div className="relative">
                    <Input
                      type="url"
                      placeholder="https://www.figma.com/file/..."
                      value={figmaUrl}
                      onChange={handleFigmaUrlChange}
                      className={`text-sm ${figmaUrlError ? 'border-red-500' : ''}`}
                    />
                    {figmaUrl && !figmaUrlError && (
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <div className="h-2 w-2 bg-green-500 rounded-full"></div>
                      </div>
                    )}
                  </div>
                  {figmaUrlError ? (
                    <p className="text-xs text-red-500">{figmaUrlError}</p>
                  ) : (
                    <p className="text-xs text-muted-foreground">
                      Paste your Figma design URL to provide design context for the review
                    </p>
                  )}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-3">
                  Analysis
                </h3>
                <div className="space-y-3">
                  <div className="flex items-start gap-3">
                    <CheckCircle className="h-5 w-5 text-success mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-foreground">
                        Good to proceed with the proposed changes
                      </p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <AlertTriangle className="h-5 w-5 text-warning mt-0.5" />
                    <div>
                      <p className="text-sm font-medium text-foreground">
                        Questions
                      </p>
                      <p className="text-xs text-muted-foreground">
                        Age-gating changes
                      </p>
                    </div>
                  </div>
                </div>
                <Button 
                  variant="outline" 
                  className="w-full mt-4"
                  onClick={handleRequestLegalReview}
                  disabled={!uploadedFile || isUploading}
                >
                  {isUploading ? 'Uploading...' : 'Generate legal review'}
                </Button>
                
                {uploadStatus.type && (
                  <div className={`mt-3 p-3 rounded-md text-sm ${
                    uploadStatus.type === 'success' 
                      ? 'bg-green-50 text-green-800 border border-green-200' 
                      : 'bg-red-50 text-red-800 border border-red-200'
                  }`}>
                    {uploadStatus.message}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Eugene's API Schema Section */}
          <Card className="lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <div className="h-5 w-5 bg-primary rounded text-primary-foreground text-xs flex items-center justify-center font-bold">
                  E
                </div>
                Eugene's API Schema
              </CardTitle>
              <Badge variant="secondary" className="w-fit">
                Potential compliance issue submitted
              </Badge>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Json
                </h3>
                <div className="bg-muted rounded-md p-3 font-mono text-sm">
                  <pre className="text-foreground whitespace-pre-wrap">
                    {`"email": {
  "type": "string",
  "format": "email"
}`}
                  </pre>
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Notes
                </h3>
                <div className="space-y-2">
                  {schemaData.notes.map((note, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="h-1.5 w-1.5 bg-muted-foreground rounded-full mt-2" />
                      <p className="text-sm text-muted-foreground">{note}</p>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Suggestions
                </h3>
                <div className="space-y-2">
                  {schemaData.suggestions.map((suggestion, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="h-1.5 w-1.5 bg-muted-foreground rounded-full mt-2" />
                      <p className="text-sm text-muted-foreground">
                        {suggestion}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Mitigations
                </h3>
                <div className="space-y-2">
                  {schemaData.mitigations.map((mitigation, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="h-1.5 w-1.5 bg-muted-foreground rounded-full mt-2" />
                      <p className="text-sm text-muted-foreground">
                        {mitigation}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Figma Import Section */}
          <Card className="lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Figma className="h-5 w-5 text-primary" />
                Figma Import
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                Import design files and components for compliance review.
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="text-sm font-medium text-foreground mb-2 block">
                  Design Files
                </label>
                <div className="space-y-3">
                  <div className="relative">
                    <Input
                      type="url"
                      placeholder="https://www.figma.com/file/..."
                      value={figmaUrl}
                      onChange={handleFigmaUrlChange}
                      className={`text-sm ${figmaUrlError ? 'border-red-500' : ''}`}
                    />
                    {figmaUrl && !figmaUrlError && (
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <div className="h-2 w-2 bg-green-500 rounded-full"></div>
                      </div>
                    )}
                  </div>
                  {figmaUrlError ? (
                    <p className="text-xs text-red-500">{figmaUrlError}</p>
                  ) : (
                    <p className="text-xs text-muted-foreground">
                      Paste your Figma design URL to import design context
                    </p>
                  )}
                </div>
              </div>

              <div className="bg-muted rounded-md p-3">
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Import Status
                </h3>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="h-2 w-2 bg-yellow-500 rounded-full"></div>
                    <p className="text-xs text-muted-foreground">
                      Ready to import design files
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                    <p className="text-xs text-muted-foreground">
                      Components will be analyzed for compliance
                    </p>
                  </div>
                </div>
              </div>

              <Button 
                variant="outline" 
                className="w-full"
                disabled={!figmaUrl.trim() || !!figmaUrlError}
              >
                Import Design Files
              </Button>
            </CardContent>
          </Card>

          {/* Company Settlements Section */}
          <Card className="lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Scale className="h-5 w-5 text-primary" />
                Company Settlements
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                Upload company settlement PDF files for legal review and reference.
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="text-sm font-medium text-foreground mb-3 block">
                  Settlement Documents
                </label>
                <div
                  className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
                    settlementDragActive
                      ? "border-primary bg-accent/50"
                      : "border-muted-foreground/30 hover:border-muted-foreground/50"
                  }`}
                  onDragEnter={handleSettlementDrag}
                  onDragLeave={handleSettlementDrag}
                  onDragOver={handleSettlementDrag}
                  onDrop={handleSettlementDrop}
                >
                  <input
                    type="file"
                    id="settlement-file-upload"
                    className="hidden"
                    onChange={handleSettlementFileInput}
                    accept=".pdf"
                    multiple
                  />
                  <label htmlFor="settlement-file-upload" className="cursor-pointer">
                    <Upload className="h-8 w-8 text-muted-foreground mx-auto mb-3" />
                    <div>
                      <p className="text-sm text-muted-foreground">
                        Drag and drop PDF files or click to select
                      </p>
                      <p className="text-xs text-muted-foreground mt-1">
                        PDF files only
                      </p>
                    </div>
                  </label>
                </div>
              </div>

              {settlementFiles.length > 0 && (
                <div>
                  <h3 className="text-sm font-medium text-foreground mb-2">
                    Selected Files ({settlementFiles.length})
                  </h3>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {settlementFiles.map((file, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-muted rounded-md">
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-foreground truncate">
                            {file.name}
                          </p>
                          <p className="text-xs text-muted-foreground">
                            {(file.size / 1024).toFixed(1)} KB
                          </p>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeSettlementFile(index)}
                          className="h-6 w-6 p-0 text-muted-foreground hover:text-destructive"
                        >
                          ×
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <Button 
                variant="outline" 
                className="w-full"
                onClick={handleUploadSettlements}
                disabled={settlementFiles.length === 0 || isUploadingSettlements}
              >
                {isUploadingSettlements ? 'Uploading...' : 'Upload Settlement Files'}
              </Button>
              
              {settlementUploadStatus.type && (
                <div className={`p-3 rounded-md text-sm ${
                  settlementUploadStatus.type === 'success' 
                    ? 'bg-green-50 text-green-800 border border-green-200' 
                    : 'bg-red-50 text-red-800 border border-red-200'
                }`}>
                  {settlementUploadStatus.message}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Product Legal Review Section */}
          <Card className="lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Info className="h-5 w-5 text-primary" />
                Product Legal Review
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Facts
                </h3>
                <div className="space-y-2">
                  {legalReview.facts.map((fact, index) => (
                    <p key={index} className="text-sm text-muted-foreground">
                      {fact}
                    </p>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Notes
                </h3>
                <div className="space-y-2">
                  {legalReview.notes.map((note, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="h-1.5 w-1.5 bg-muted-foreground rounded-full mt-2" />
                      <p className="text-sm text-muted-foreground">{note}</p>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Suggestions
                </h3>
                <div className="space-y-2">
                  {legalReview.suggestions.map((suggestion, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="h-1.5 w-1.5 bg-muted-foreground rounded-full mt-2" />
                      <p className="text-sm text-muted-foreground">
                        {suggestion}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Mitigations
                </h3>
                <div className="space-y-2">
                  {legalReview.mitigations.map((mitigation, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="h-1.5 w-1.5 bg-muted-foreground rounded-full mt-2" />
                      <p className="text-sm text-muted-foreground">
                        {mitigation}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Data Flow Section */}
          <Card className="lg:col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <div className="h-5 w-5 bg-primary rounded text-primary-foreground text-xs flex items-center justify-center font-bold">
                  D
                </div>
                Data Flow
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                Analyze data flow and privacy implications.
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Data Sources
                </h3>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="h-2 w-2 bg-blue-500 rounded-full"></div>
                    <p className="text-xs text-muted-foreground">User input data</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="h-2 w-2 bg-green-500 rounded-full"></div>
                    <p className="text-xs text-muted-foreground">Third-party integrations</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="h-2 w-2 bg-yellow-500 rounded-full"></div>
                    <p className="text-xs text-muted-foreground">Analytics data</p>
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-foreground mb-2">
                  Privacy Impact
                </h3>
                <div className="bg-muted rounded-md p-3">
                  <p className="text-xs text-muted-foreground">
                    Data flow analysis will be performed to identify privacy implications and compliance requirements.
                  </p>
                </div>
              </div>

              <Button 
                variant="outline" 
                className="w-full"
              >
                Analyze Data Flow
              </Button>
            </CardContent>
          </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
